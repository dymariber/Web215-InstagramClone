{"version":3,"sources":["firebase.js","Post.js","axios.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","forwardRef","ref","user","username","postId","imageUrl","caption","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","instance","axios","create","baseUrl","ImageUpload","image","setImage","setUrl","progress","setProgress","setCaption","max","Input","files","Button","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","post","timestamp","FieldValue","serverTimestamp","getModalStyle","height","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","setUsername","email","setEmail","password","setPassword","setUser","open","setOpen","registerOpen","setRegisterOpen","onAuthStateChanged","authUser","updateProfile","orderBy","id","Modal","onClose","style","signInWithEmailAndPassword","catch","alert","message","createUserWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e46294b0.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyB-sgdsmQWCAz4MIp5Ns8yM_o1yeY9uwCo\",\r\n  authDomain: \"instagram-clone-b86bc.firebaseapp.com\",\r\n  projectId: \"instagram-clone-b86bc\",\r\n  storageBucket: \"instagram-clone-b86bc.appspot.com\",\r\n  messagingSenderId: \"523543232509\",\r\n  appId: \"1:523543232509:web:1e917b3266863144baa394\",\r\n  measurementId: \"G-QJ5306WSCZ\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage};\r\n","import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from \"./firebase\";\r\n\r\nconst Post = forwardRef(\r\n  ({ user, username, postId, imageUrl, caption }, ref) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      let unsubscribe;\r\n      if (postId) {\r\n        unsubscribe = db\r\n          .collection(\"posts\")\r\n          .doc(postId)\r\n          .collection(\"comments\")\r\n          .onSnapshot((snapshot) => {\r\n            setComments(snapshot.docs.map((doc) => doc.data()));\r\n          });\r\n      }\r\n\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [postId]);\r\n\r\n    const postComment = (e) => {\r\n      e.preventDefault();\r\n\r\n      db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n        text: comment,\r\n        username: user.displayName,\r\n      });\r\n      setComment(\"\");\r\n    };\r\n\r\n    return (\r\n      <div className=\"post\" ref={ref}>\r\n        <div className=\"post__header\">\r\n          <Avatar\r\n            className=\"post__avatar\"\r\n            alt={username}\r\n            src=\"/static/images/avatar/1.jpg\"\r\n          />\r\n          <h3>{username}</h3>\r\n        </div>\r\n\r\n        <img className=\"post__image\" src={imageUrl} alt=\"post\" />\r\n        <h4 className=\"post__text\">\r\n          {username} <span className=\"post__caption\">{caption}</span>\r\n        </h4>\r\n\r\n        <div className=\"post__comments\">\r\n          {comments.map((comment) => (\r\n            <p>\r\n              <b>{comment.username}</b> {comment.text}\r\n            </p>\r\n          ))}\r\n        </div>\r\n\r\n        {user && (\r\n          <form className=\"post__commentBox\">\r\n            <input\r\n              className=\"post__input\"\r\n              type=\"text\"\r\n              placeholder=\"Add a comment...\"\r\n              value={comment}\r\n              onChange={(e) => setComment(e.target.value)}\r\n            />\r\n            <button\r\n              disabled={!comment}\r\n              className=\"post__button\"\r\n              type=\"submit\"\r\n              onClick={postComment}\r\n            >\r\n              Post\r\n            </button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;","import axios from 'axios'\r\n\r\nconst instance = axios.create ({\r\n    baseUrl: 'http://localhost:8080',\r\n});\r\n\r\nexport default instance; ","import React, { useState } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { storage, db } from \"./firebase\";\r\nimport \"./ImageUpload.css\";\r\nimport { Input, Button } from \"@material-ui/core\";\r\nimport axios from \"./axios\";\r\n\r\n\r\nconst ImageUpload = ({ username }) => {\r\n  const [image, setImage] = useState(null);\r\n  const [url, setUrl] = useState(\"\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        // progress function ...\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        // Error function ...\r\n        console.log(error);\r\n      },\r\n      () => {\r\n        // complete function ...\r\n        storage\r\n          .ref(\"images\")\r\n          .child(image.name)\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            setUrl(url);\r\n\r\n            axios.post('/upload', {\r\n              caption: caption,\r\n              user: username,\r\n              image: url\r\n            });\r\n            \r\n            // post image inside db\r\n            db.collection(\"posts\").add({\r\n              imageUrl: url,\r\n              caption: caption,\r\n              username: username,\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            });\r\n\r\n            setProgress(0);\r\n            setCaption(\"\");\r\n            setImage(null);\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"imageupload\">\r\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\r\n      <Input\r\n        placeholder=\"Enter a caption\"\r\n        value={caption}\r\n        onChange={(e) => setCaption(e.target.value)}\r\n      />\r\n      <div>\r\n        <input type=\"file\" onChange={handleChange} />\r\n        <Button className=\"imageupload__button\" onClick={handleUpload}>\r\n          Upload\r\n        </Button>\r\n      </div>\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport ImageUpload from \"./ImageUpload\";\nimport { db, auth } from \"./firebase\";\nimport { Button, Avatar, makeStyles, Modal, Input } from \"@material-ui/core\";\nimport FlipMove from \"react-flip-move\";\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    height: \"300px\",\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    height: 200,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [registerOpen, setRegisterOpen] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user is logged in...\n        console.log(authUser);\n        setUser(authUser);\n\n        if (authUser.displayName) {\n          // dont update username\n        } else {\n          return authUser.updateProfile({\n            displayName: username,\n          });\n        }\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() })))\n      );\n  }, []);\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  };\n\n  const handleRegister = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setRegisterOpen(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleLogin}>Login</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={registerOpen} onClose={() => setRegisterOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleRegister}>Register</Button>\n          </form>\n        </div>\n      </Modal>\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user?.displayName ? (\n          <div className=\"app__headerRight\">\n            <Button onClick={() => auth.signOut()}>Logout</Button>\n            <Avatar\n              className=\"app__headerAvatar\"\n              alt={user.displayName}\n              src=\"/static/images/avatar/1.jpg\"\n            />\n          </div>\n        ) : (\n          <form className=\"app__loginHome\">\n            <Button onClick={() => setOpen(true)}>Login</Button>\n            <Button onClick={() => setRegisterOpen(true)}>Sign Up</Button>\n          </form>\n        )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          <FlipMove>\n            {posts.map(({ id, post }) => (\n              <Post\n                user={user}\n                key={id}\n                postId={id}\n                username={post.username}\n                caption={post.caption}\n                imageUrl={post.imageUrl}\n              />\n            ))}\n          </FlipMove>\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url=\"https://www.instagram.com/p/B_uf9dmAGPw/\"\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n\n      {user?.displayName ? (\n        <div className=\"app__upload\">\n          <ImageUpload username={user.displayName} />\n        </div>\n      ) : (\n        <center>\n          <h3>Login to upload</h3>\n        </center>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}